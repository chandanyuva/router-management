const express = require("express");
const cors = require("cors");
const db = require("./db/pool");
const app = express();
const path = require("path");

const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json())
// app.use(express.urlencoded({ extended: true })); // For parsing application/x-www-form-urlencoded

app.get("/api/routers", (req, res) => {
  db.all("SELECT * FROM routers", [], (err, rows) => {
    if (err) {
      console.error("❌ Error fetching routers:", err.message);
      return res.status(500).json({ error: err.message });
    }
    console.log("GET: routers: ALL");
    console.table(rows);
    res.json(rows);
  })
})

app.get("/api/routers/:id", (req, res) => {
  const requestedId = Number(req.params.id);
  db.get("SELECT * FROM routers WHERE id = ?", [requestedId], (err, row) => {
    if (err) {
      console.error("❌ Error fetching router:", err.message);
      return res.status(500).json({ error: err.message });
    }
    if (!row) {
      console.error("Invalid router ID:", requestedId);
      return res.status(404).json({ error: "Invalid router ID" });
    }
    console.log(`GET: routers: ID ${requestedId}`);
    res.json(row);
  })
})

app.post("/api/routers", (req, res) => {
  const { name, ssid, password } = req.body;

  //validate input
  if (!name || !ssid || !password) {
    return res.status(400).json({ error: "name | ssid | password are invalid" });
  }

  if (name == "" || ssid == "" || password == "") {
    return res.status(400).json({ error: "name | ssid | password cannot be empty strings" });
  }
  const sql = "INSERT INTO routers (name,ssid,password) VALUES (?,?,?)";
  db.run(sql, [name, ssid, password], function(err) { // use regular function since sometimes in SQLite + Node.js because of how you’re calling db.run(). In sqlite3, the function callback is crucial — arrow functions don’t bind 'this' the way sqlite3 expects.
    if (err) {
      console.error("❌ Error inserting router:", err.message);
      return res.status(500).json({ error: err.message });
    }
    // this.lastID contains the autogenerated ID
    // console.log(this.lastID);
    const insertedRouter = { id: this.lastID, name, ssid, password };
    console.log(`POST: routers: ID ${insertedRouter.id}`);
    console.table([insertedRouter]);
    res.status(201).json({ message: "Router added successfully!", data: insertedRouter });
  })
});


app.put("/api/routers/:id", (req, res) => {
  const requestedId = Number(req.params.id);
  const { name, ssid, password } = req.body;

  //validate
  if (!name && !ssid && !password) {
    return res.status(400).json({ error: "At least one field (name,ssid,password) is required" });
  }

  // Update router in DB
  const sql = `UPDATE routers SET name = COALESCE(?,name), ssid = COALESCE(?,ssid), password = COALESCE(?,password) WHERE id = ?`;

  db.run(sql, [name, ssid, password, requestedId], function(err) {
    if (err) {
      console.error("❌ Error updating router:", err.message);
      return res.status(500).json({ error: err.message });
    }
    if (this.changes === 0) {
      return res.status(404).json({ error: "Invalid router ID" });
    }
    //fetch updated row
    db.get("SELECT * FROM routers WHERE id=?", [requestedId], (err, row) => {
      if (err) {
        return res.status(500).json({ error: err.message });
      }
      console.log(`PUT: routers: ID ${requestedId}`);
      console.table(row);
      res.json({ message: "Router updated successfully!", data: row });
    })
  });

});

app.delete("/api/routers/:id", (req, res) => {
  const requestedId = Number(req.params.id);
  console.warn("router being deleted!");
  //print the delete router to log
  db.get("SELECT * FROM routers WHERE id=?", [requestedId], (err, row) => {
    if (err) {
      return res.status(500).json({ error: err.message });
    }
    console.table(row);
  })

  db.run("DELETE FROM routers WHERE id = ?", [requestedId], function(err) {
    if (err) {
      console.err("❌ Error deleting router:", err.message);
      return res.status(500).json({ error: err.message });
    }
    if (this.changes === 0) {
      return res.status(404).json({ error: "Invalid router ID" });
    }
    console.log(`DELETE: routers: ID ${requestedId}`);
    res.json({ message: "Router deleted successfully!", deletedId: requestedId });
  })
})

// 👉 Serve React build
app.use(express.static(path.join(__dirname, "../client/dist")));

// 👉 Catch-all handler: send back React's index.html for any unknown route
app.use((req, res) => {
  res.sendFile(path.join(__dirname, "../client/dist", "index.html"));
});

app.listen(PORT, async () => {
  console.log(`app listening on post: ${PORT}`)
})
